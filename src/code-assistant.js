const vscode = require("vscode");
const DeepSeekClient = require("./deepseek-client");

class DeepSeekCodeAssistant {
  constructor() {
    this.client = null;
    this._initializeClient();
  }

  _initializeClient() {
    const config = vscode.workspace.getConfiguration("deepseek");
    const apiKey = config.get("apiKey");
    const model = config.get("model") || "deepseek-coder";

    if (apiKey) {
      this.client = new DeepSeekClient(apiKey, model);
    }
  }

  async _checkAPI() {
    if (!this.client) {
      this._initializeClient();
    }

    const config = vscode.workspace.getConfiguration("deepseek");
    const apiKey = config.get("apiKey");

    if (!apiKey) {
      vscode.window.showErrorMessage(
        "API –∫–ª—é—á DeepSeek –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –µ–≥–æ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö VS Code."
      );
      return false;
    }
    return true;
  }

  async _getSelectedCode() {
    const editor = vscode.window.activeTextEditor;
    if (!editor) {
      vscode.window.showWarningMessage("–ê–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–¥–∞–∫—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω");
      return null;
    }

    const selection = editor.selection;
    let code = editor.document.getText(selection);

    // –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –≤—ã–¥–µ–ª–µ–Ω–æ, –±–µ—Ä–µ–º –≤–µ—Å—å —Ñ–∞–π–ª
    if (!code.trim() && editor.document.getText().trim()) {
      const fullRange = new vscode.Range(
        editor.document.positionAt(0),
        editor.document.positionAt(editor.document.getText().length)
      );
      code = editor.document.getText(fullRange);
    }

    if (!code.trim()) {
      vscode.window.showWarningMessage(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–¥–µ–ª–∏—Ç–µ –∫–æ–¥ –∏–ª–∏ –æ—Ç–∫—Ä–æ–π—Ç–µ —Ñ–∞–π–ª —Å –∫–æ–¥–æ–º"
      );
      return null;
    }

    return {
      code: code,
      language: editor.document.languageId,
      editor: editor,
      selection: selection,
    };
  }

  async explainCode() {
    if (!(await this._checkAPI())) return;

    const codeData = await this._getSelectedCode();
    if (!codeData) return;

    await vscode.window.withProgress(
      {
        location: vscode.ProgressLocation.Notification,
        title: "DeepSeek: –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –∫–æ–¥...",
        cancellable: false,
      },
      async (progress) => {
        try {
          const explanation = await this.client.explainCode(
            codeData.code,
            codeData.language
          );
          this._showResult(
            `üìñ –û–±—ä—è—Å–Ω–µ–Ω–∏–µ –∫–æ–¥–∞ (${codeData.language}):`,
            explanation,
            codeData.code
          );
        } catch (error) {
          vscode.window.showErrorMessage(`–û—à–∏–±–∫–∞: ${error.message}`);
        }
      }
    );
  }

  async generateCode() {
    if (!(await this._checkAPI())) return;

    const description = await vscode.window.showInputBox({
      prompt: "–û–ø–∏—à–∏—Ç–µ –∫–æ–¥, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å",
      placeHolder: "–ù–∞–ø—Ä–∏–º–µ—Ä: —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è —Ñ–∞–∫—Ç–æ—Ä–∏–∞–ª–∞ –Ω–∞ JavaScript",
    });

    if (!description) return;

    const languages = [
      "javascript",
      "typescript",
      "python",
      "java",
      "c",
      "c++",
      "c#",
      "php",
      "ruby",
      "go",
      "rust",
      "swift",
      "kotlin",
      "html",
      "css",
    ];

    const language = await vscode.window.showQuickPick(
      languages.map((lang) => ({
        label: lang,
        description: `–ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å ${lang} –∫–æ–¥`,
      })),
      {
        placeHolder: "–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è",
      }
    );

    if (!language) return;

    await vscode.window.withProgress(
      {
        location: vscode.ProgressLocation.Notification,
        title: "DeepSeek: –ì–µ–Ω–µ—Ä–∏—Ä—É—é –∫–æ–¥...",
        cancellable: false,
      },
      async (progress) => {
        try {
          const generatedCode = await this.client.generateCode(
            description,
            language.label
          );
          this._showResult(
            `‚ú® –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–¥ (${language.label}):`,
            generatedCode,
            description
          );
        } catch (error) {
          vscode.window.showErrorMessage(`–û—à–∏–±–∫–∞: ${error.message}`);
        }
      }
    );
  }

  async refactorCode() {
    if (!(await this._checkAPI())) return;

    const codeData = await this._getSelectedCode();
    if (!codeData) return;

    const instructions = await vscode.window.showInputBox({
      prompt: "–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)",
      placeHolder:
        "–ù–∞–ø—Ä–∏–º–µ—Ä: —É–ª—É—á—à–∏—Ç—å —á–∏—Ç–∞–µ–º–æ—Å—Ç—å, –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å",
    });

    await vscode.window.withProgress(
      {
        location: vscode.ProgressLocation.Notification,
        title: "DeepSeek: –†–µ—Ñ–∞–∫—Ç–æ—Ä—é –∫–æ–¥...",
        cancellable: false,
      },
      async (progress) => {
        try {
          const refactoredCode = await this.client.refactorCode(
            codeData.code,
            codeData.language,
            instructions
          );
          this._showResult(
            `üîß –†–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥ –∫–æ–¥–∞ (${codeData.language}):`,
            refactoredCode,
            codeData.code
          );
        } catch (error) {
          vscode.window.showErrorMessage(`–û—à–∏–±–∫–∞: ${error.message}`);
        }
      }
    );
  }

  async debugCode() {
    if (!(await this._checkAPI())) return;

    const codeData = await this._getSelectedCode();
    if (!codeData) return;

    await vscode.window.withProgress(
      {
        location: vscode.ProgressLocation.Notification,
        title: "DeepSeek: –ò—â—É –æ—à–∏–±–∫–∏...",
        cancellable: false,
      },
      async (progress) => {
        try {
          const debugInfo = await this.client.debugCode(
            codeData.code,
            codeData.language
          );
          this._showResult(
            `üêõ –ê–Ω–∞–ª–∏–∑ –æ—à–∏–±–æ–∫ (${codeData.language}):`,
            debugInfo,
            codeData.code
          );
        } catch (error) {
          vscode.window.showErrorMessage(`–û—à–∏–±–∫–∞: ${error.message}`);
        }
      }
    );
  }

  async optimizeCode() {
    if (!(await this._checkAPI())) return;

    const codeData = await this._getSelectedCode();
    if (!codeData) return;

    await vscode.window.withProgress(
      {
        location: vscode.ProgressLocation.Notification,
        title: "DeepSeek: –û–ø—Ç–∏–º–∏–∑–∏—Ä—É—é –∫–æ–¥...",
        cancellable: false,
      },
      async (progress) => {
        try {
          const optimizedCode = await this.client.optimizeCode(
            codeData.code,
            codeData.language
          );
          this._showResult(
            `‚ö° –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∫–æ–¥–∞ (${codeData.language}):`,
            optimizedCode,
            codeData.code
          );
        } catch (error) {
          vscode.window.showErrorMessage(`–û—à–∏–±–∫–∞: ${error.message}`);
        }
      }
    );
  }

  async documentCode() {
    if (!(await this._checkAPI())) return;

    const codeData = await this._getSelectedCode();
    if (!codeData) return;

    await vscode.window.withProgress(
      {
        location: vscode.ProgressLocation.Notification,
        title: "DeepSeek: –î–æ–∫—É–º–µ–Ω—Ç–∏—Ä—É—é –∫–æ–¥...",
        cancellable: false,
      },
      async (progress) => {
        try {
          const documentation = await this.client.documentCode(
            codeData.code,
            codeData.language
          );
          this._showResult(
            `üìù –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –∫–æ–¥–∞ (${codeData.language}):`,
            documentation,
            codeData.code
          );
        } catch (error) {
          vscode.window.showErrorMessage(`–û—à–∏–±–∫–∞: ${error.message}`);
        }
      }
    );
  }

  async translateCode() {
    if (!(await this._checkAPI())) return;

    const codeData = await this._getSelectedCode();
    if (!codeData) return;

    const targetLanguages = [
      "javascript",
      "python",
      "java",
      "c++",
      "c#",
      "go",
      "rust",
      "php",
    ];

    const targetLanguage = await vscode.window.showQuickPick(
      targetLanguages.map((lang) => ({
        label: lang,
        description: `–ü–µ—Ä–µ–≤–µ—Å—Ç–∏ –Ω–∞ ${lang}`,
      })),
      {
        placeHolder: "–í—ã–±–µ—Ä–∏—Ç–µ —Ü–µ–ª–µ–≤–æ–π —è–∑—ã–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è",
      }
    );

    if (!targetLanguage) return;

    await vscode.window.withProgress(
      {
        location: vscode.ProgressLocation.Notification,
        title: "DeepSeek: –ü–µ—Ä–µ–≤–æ–∂—É –∫–æ–¥...",
        cancellable: false,
      },
      async (progress) => {
        try {
          const translatedCode = await this.client.translateCode(
            codeData.code,
            codeData.language,
            targetLanguage.label
          );
          this._showResult(
            `üåê –ü–µ—Ä–µ–≤–æ–¥ –∫–æ–¥–∞ (${codeData.language} ‚Üí ${targetLanguage.label}):`,
            translatedCode,
            codeData.code
          );
        } catch (error) {
          vscode.window.showErrorMessage(`–û—à–∏–±–∫–∞: ${error.message}`);
        }
      }
    );
  }

  _showResult(title, content, original) {
    const panel = vscode.window.createWebviewPanel(
      "deepseekResult",
      "DeepSeek –†–µ–∑—É–ª—å—Ç–∞—Ç",
      vscode.ViewColumn.Beside,
      {
        enableScripts: true,
        retainContextWhenHidden: true,
      }
    );

    panel.webview.html = this._getWebviewContent(title, content, original);
  }

  _getWebviewContent(title, content, original) {
    return `
        <!DOCTYPE html>
        <html lang="ru">
        <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>DeepSeek –†–µ–∑—É–ª—å—Ç–∞—Ç</title>
            <style>
                body { 
                    padding: 20px; 
                    font-family: var(--vscode-font-family); 
                    color: var(--vscode-foreground);
                    background-color: var(--vscode-editor-background);
                    line-height: 1.6;
                }
                .header { 
                    color: var(--vscode-textLink-foreground); 
                    margin-bottom: 20px; 
                    border-bottom: 2px solid var(--vscode-panel-border);
                    padding-bottom: 15px;
                    font-size: 18px;
                    font-weight: bold;
                }
                .content { 
                    background: var(--vscode-textCodeBlock-background); 
                    padding: 20px; 
                    border-radius: 8px; 
                    white-space: pre-wrap;
                    border: 1px solid var(--vscode-panel-border);
                    margin-bottom: 20px;
                    font-family: var(--vscode-editor-font-family);
                    line-height: 1.5;
                }
                .original { 
                    margin-top: 25px; 
                    padding: 15px; 
                    background: var(--vscode-input-background);
                    border-left: 4px solid var(--vscode-inputValidation-infoBorder);
                    border-radius: 4px;
                }
                .original-title {
                    font-weight: bold;
                    margin-bottom: 10px;
                    color: var(--vscode-descriptionForeground);
                }
                code {
                    font-family: 'Courier New', monospace;
                    background: var(--vscode-textCodeBlock-background);
                    padding: 2px 6px;
                    border-radius: 3px;
                }
                pre {
                    background: var(--vscode-textCodeBlock-background);
                    padding: 15px;
                    border-radius: 6px;
                    overflow-x: auto;
                    margin: 10px 0;
                    border: 1px solid var(--vscode-panel-border);
                }
            </style>
        </head>
        <body>
            <div class="header">${title}</div>
            <div class="content">${this._escapeHtml(content)}</div>
            ${
              original
                ? `
            <div class="original">
                <div class="original-title">–ò—Å—Ö–æ–¥–Ω—ã–π –∫–æ–¥/–∑–∞–ø—Ä–æ—Å:</div>
                <code>${this._escapeHtml(original)}</code>
            </div>
            `
                : ""
            }
        </body>
        </html>`;
  }

  _escapeHtml(unsafe) {
    return unsafe
      .replace(/&/g, "&amp;")
      .replace(/</g, "&lt;")
      .replace(/>/g, "&gt;")
      .replace(/"/g, "&quot;")
      .replace(/'/g, "&#039;")
      .replace(/\n/g, "<br>")
      .replace(/\t/g, "&nbsp;&nbsp;&nbsp;&nbsp;")
      .replace(/  /g, "&nbsp;&nbsp;");
  }
}

module.exports = DeepSeekCodeAssistant;
